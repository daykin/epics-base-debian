From: Martin Konrad <konrad@frib.msu.edu>
Date: Mon, 6 May 2019 14:56:45 -0400
Subject: Remove cacExitHandler

We need to ensure the allocated resources stick around until
the last instance using them doesn't need them anymore. Sharing
a raw pointer by exporting it as a global variable is not
compatible with cleaning up at all. For now we remove the
clean-up code.

Note: This fixes a segfault during IOC shutdown when using both
pyDevSup and pyepics. See the discussion on
https://epics.anl.gov/tech-talk/2019/msg00778.php for details.
---
 src/ca/client/ca_client_context.cpp | 8 --------
 src/ca/client/oldAccess.h           | 2 --
 2 files changed, 10 deletions(-)

diff --git a/src/ca/client/ca_client_context.cpp b/src/ca/client/ca_client_context.cpp
index 20a6e84..ce8de1e 100644
--- a/src/ca/client/ca_client_context.cpp
+++ b/src/ca/client/ca_client_context.cpp
@@ -45,20 +45,12 @@ static epicsThreadOnceId cacOnce = EPICS_THREAD_ONCE_INIT;
 
 const unsigned ca_client_context :: flushBlockThreshold = 0x58000;
 
-extern "C" void cacExitHandler ( void *)
-{
-    epicsThreadPrivateDelete ( caClientCallbackThreadId );
-    caClientCallbackThreadId = 0;
-    delete ca_client_context::pDefaultServiceInstallMutex;
-}
-
 // runs once only for each process
 extern "C" void cacOnceFunc ( void * )
 {
     caClientCallbackThreadId = epicsThreadPrivateCreate ();
     assert ( caClientCallbackThreadId );
     ca_client_context::pDefaultServiceInstallMutex = newEpicsMutex;
-    epicsAtExit ( cacExitHandler,0 );
 }
 
 extern epicsThreadPrivateId caClientContextId;
diff --git a/src/ca/client/oldAccess.h b/src/ca/client/oldAccess.h
index 04f5518..daa4cc9 100644
--- a/src/ca/client/oldAccess.h
+++ b/src/ca/client/oldAccess.h
@@ -288,7 +288,6 @@ private:
 };
 
 extern "C" void cacOnceFunc ( void * );
-extern "C" void cacExitHandler ( void *);
 
 struct ca_client_context : public cacContextNotify
 {
@@ -428,7 +427,6 @@ private:
     ca_client_context & operator = ( const ca_client_context & );
 
     friend void cacOnceFunc ( void * );
-    friend void cacExitHandler ( void *);
     static cacService * pDefaultService;
     static epicsMutex * pDefaultServiceInstallMutex;
     static const unsigned flushBlockThreshold;
